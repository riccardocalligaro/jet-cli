{% block content -%}

import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';

{{blocImports}}

part '{{modelNameLowercase}}_state.dart';
part '{{modelNameLowercase}}_event.dart';


class {{modelNameCapitalized}}Bloc extends Bloc<{{modelNameCapitalized}}Event, {{modelNameCapitalized}}State> {
  
  final {{ usedRepository }} {{ repositoryNameLowercase }}; 

  {{modelNameCapitalized}}Bloc({
    required this.{{ repositoryNameLowercase }}
  }) : super({{modelNameCapitalized}}Initial()) {
    on<{{actionCapitalized}}{{modelNameCapitalized}}>((event, emit) async {
      emit({{modelNameCapitalized}}Loading());

       final {{modelNameLowercase}}Result = await {{ repositoryNameLowercase }}.{{actionCamelCase}}{{modelNameCapitalized}}(
         {{blocToRepository}}
       );

       {{modelNameLowercase}}Result.fold(
         (failure) {
           emit({{modelNameCapitalized}}Failure(failure: failure, event: event));
         },
         ({{modelNameLowercase}}) {
            emit({{modelNameCapitalized}}LoadSuccess({{modelNameLowercase}}: {{modelNameLowercase}}));
         },
       );

    });
  }
}
{% endblock -%}